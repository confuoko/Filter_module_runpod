import shutil
import time
import boto3
import os
from tempfile import NamedTemporaryFile

import requests
from dotenv import load_dotenv
from pydub import AudioSegment
import torch
from services.demux_service import do_clean_file, get_audio_duration


def main():
    """
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ s3 –∏ —Ñ–ª–∞–≥ do_clean (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–ª–∏ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å).
        1. –°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ s3 –∞—É–¥–∏–æ –≤ –ø–∞–ø–∫—É temp.
        2. –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —ç—Ç–æ –≤ –ë–î.
        3. –ï—Å–ª–∏ —Ñ–ª–∞–≥ do_clean=True - –æ—á–∏—â–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π —Ñ–∞–π–ª –≤ temp –ø–æ–¥ –∏–º–µ–Ω–µ–º _cleaned.wav.
           –ï—Å–ª–∏ do_clean=False - —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ç–æ—Ä.
    """

    torch_variable = str(torch.cuda.is_available())
    if torch.cuda.is_available():
        print("‚úÖ CUDA –¥–æ—Å—Ç—É–ø–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GPU)")
    else:
        print("‚ùå CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU)")

    load_dotenv()

    # 1. –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ s3 –≤ –ø–∞–ø–∫—É temp
    file_key = "interview1.wav"
    do_clean = 'False'

    print(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞: {file_key}")
    print(f"–§–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {do_clean}")

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ s3
    AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
    bucket_name = "whisper-audiotest"

    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
    TRANSCRIBATOR_AUTH_TOKEN = os.getenv("TRANSCRIBATOR_AUTH_TOKEN")
    TRANSCRIBATOR_QUEUE = os.getenv("TRANSCRIBATOR_QUEUE")
    headers = {
        'Content-Type': 'application/json',
        'Authorization': TRANSCRIBATOR_AUTH_TOKEN
    }

    s3 = boto3.client(
        's3',
        endpoint_url="http://storage.yandexcloud.net",
        aws_access_key_id=AWS_ACCESS_KEY_ID,
        aws_secret_access_key=AWS_SECRET_ACCESS_KEY
    )

    file_obj = s3.get_object(Bucket=bucket_name, Key=file_key)
    temp_dir = os.path.join(os.getcwd(), 'temp')
    os.makedirs(temp_dir, exist_ok=True)
    temp_file_path = os.path.join(temp_dir, file_key)
    demux_path = os.path.join(os.getcwd(), 'separated')
    demux_useful_path = os.path.join(demux_path, 'htdemucs')



    with open(temp_file_path, 'wb') as temp_file:
        temp_file.write(file_obj['Body'].read())

    print(f'üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É: {temp_file_path}')

    # === –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ ===
    duration = get_audio_duration(temp_file_path)

    # === –û—á–∏—â–∞–µ–º –∞—É–¥–∏–æ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ñ–ª–∞–≥ do_clean ===
    if do_clean is True:
        print("üß† –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –∞—É–¥–∏–æ-—Ñ–∞–π–ª–∞...")
        start_time = time.time()
        cleaned_file_path = do_clean_file(temp_file_path)
        print(f"–û—á–∏—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {cleaned_file_path}")


        cleaned_file_name = os.path.basename(cleaned_file_path)
        print(f"‚òÅÔ∏è –§–∞–π–ª –ø–æ–ª—É—á–∏—Ç –∏–º—è: {cleaned_file_name}")

        duration = round(time.time() - start_time, 2)  # –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º
        print(f"‚úÖ –ì–æ—Ç–æ–≤–æ –∑–∞ {duration} —Å–µ–∫—É–Ω–¥.")

        # === –∑–∞–≥—Ä—É–∂–∞–µ–º –æ—á–∏—â–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ –≤ s3 ===
        s3.upload_file(
            Filename=cleaned_file_path,
            Bucket=bucket_name,
            Key=cleaned_file_name
        )
        print(f"‚òÅÔ∏è –§–∞–π–ª {cleaned_file_name} –∑–∞–≥—Ä—É–∂–µ–Ω –≤ S3 (–≤ –∫–æ—Ä–µ–Ω—å –±–∞–∫–µ—Ç–∞)")

        # === –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ===
        os.remove(cleaned_file_path)
        os.remove(temp_file_path)
        shutil.rmtree(demux_useful_path)
        print("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ç–æ—Ä –æ—á–∏—â–µ–Ω–Ω—É—é –∞—É–¥–∏–æ
        data = {
            'input': {"file_key": cleaned_file_name}
        }

        response = requests.post(f'https://api.runpod.ai/v2/{TRANSCRIBATOR_QUEUE}/run', headers=headers, json=data)

        print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–∏—Å—É –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏. –û—Ç–≤–µ—Ç: {response.json()}")


    else:
        # –µ—Å–ª–∏ —Ñ–ª–∞–≥ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω - —Å—Ä–∞–∑—É –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ç–æ—Ä
        data = {
            'input': {"file_key": file_key}
        }
        response = requests.post(f'https://api.runpod.ai/v2/{TRANSCRIBATOR_QUEUE}/run', headers=headers, json=data)

        print(f"–í–∞—à–∞ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –±—ã–ª–∞ —Å—Ä–∞–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Å–µ—Ä–≤–∏—Å –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏. –û—Ç–≤–µ—Ç: {response.json()}")
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ –≤ –ë–î



if __name__ == "__main__":
    main()